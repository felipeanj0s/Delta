# ======================================================================
# GT Monitoramento 2025
# roles/zabbix_server_register_proxy/tasks/main.yml
# Registra/atualiza Proxy no Zabbix Server via API (HTTP/HTTPS)
# ======================================================================
---
# 0) Base da API: usa a URL completa se houver; senão monta pelos componentes
- name: Definir preferência de URL (A: completa)
  ansible.builtin.set_fact:
    _zbx_url_pref: "{{ (zabbix_server_url | default('')) | string | trim }}"

- name: Montar URL base a partir de componentes (B), se não houver URL completa
  ansible.builtin.set_fact:
    _zbx_scheme: "{{ (zabbix_server_use_https | default(false) | bool) | ternary('https','http') }}"
    _zbx_port: >-
      {{
        ((zabbix_server_port | default('')) | string | trim | length) > 0
        | ternary((zabbix_server_port | int), (zabbix_server_use_https | default(false) | bool | ternary(443,80)))
      }}
    _zbx_path: "{{ (zabbix_server_path | default('zabbix')) | trim('/') }}"
  when: _zbx_url_pref | length == 0

- name: Definir URL base final e endpoint da API
  ansible.builtin.set_fact:
    _zbx_base_url: >-
      {{
        (_zbx_url_pref | length > 0)
          | ternary(
              (_zbx_url_pref | regex_replace('/+$','')),
              (_zbx_scheme ~ '://' ~ zabbix_server_host ~ ':' ~ _zbx_port ~ '/' ~ _zbx_path)
            )
      }}
    zbx_api_url: "{{ _zbx_base_url ~ '/api_jsonrpc.php' }}"

# 0.1) Ler PSK local do proxy para alinhar no Server somente quando TLS=PSK e flag ligada
- name: Ler PSK do proxy (condicional)
  ansible.builtin.slurp:
    src: "{{ zabbix_proxy_psk_file }}"
  register: proxy_psk_read
  no_log: true
  when:
    - zabbix_register_proxy_psk_to_server | default(true) | bool
    - (zabbix_proxy_tls_connect | int) == 1 or (zabbix_proxy_tls_accept | int) % 2 == 1

- name: PSK em memória (64 hex)
  ansible.builtin.set_fact:
    zbx_proxy_psk_value: "{{ (proxy_psk_read.content | b64decode) | trim }}"
  no_log: true
  when: proxy_psk_read is defined and proxy_psk_read.content is defined

# 1) Verificar se o proxy já existe
- name: API | proxy.get (por nome)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "proxy.get"
      params:
        filter:
          name: ["{{ zabbix_proxy_hostname }}"]
        output:
          - proxyid
          - name
          - operating_mode
          - tls_connect
          - tls_accept
          - tls_psk_identity
      id: 1
    follow_redirects: all
    validate_certs: "{{ zabbix_validate_certs | default(false) }}"
  register: zbx_proxy_get
  failed_when: zbx_proxy_get.json.error is defined
  delegate_to: localhost
  run_once: true

- name: Fatos | existe/id/estado atual
  ansible.builtin.set_fact:
    zbx_proxy_exists: "{{ (zbx_proxy_get.json.result | default([])) | length > 0 }}"
    zbx_proxy_id: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='proxyid') | first | default('') }}"
    zbx_mode_cur: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='operating_mode') | first | default(omit) }}"
    zbx_tls_conn_cur: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='tls_connect') | first | default(omit) }}"
    zbx_tls_acc_cur: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='tls_accept') | first | default(omit) }}"
    zbx_tls_id_cur: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='tls_psk_identity') | first | default('') }}"

# 2) Criar (mínimo)
- name: API | proxy.create (mínimo)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "proxy.create"
      params:
        name: "{{ zabbix_proxy_hostname }}"
        description: "Proxy {{ zabbix_proxy_hostname }} provisionado via Ansible"
        operating_mode: "{{ zabbix_proxy_mode | int }}"
      id: 2
    follow_redirects: all
    validate_certs: "{{ zabbix_validate_certs | default(false) }}"
  when: not zbx_proxy_exists
  register: zbx_proxy_create
  failed_when: zbx_proxy_create.json.error is defined
  delegate_to: localhost
  run_once: true

# 3) Atualizar ID se criou agora
- name: Atualizar ID (se criou agora)
  ansible.builtin.set_fact:
    zbx_proxy_id: "{{ zbx_proxy_create.json.result.proxyids[0] }}"
  when: not zbx_proxy_exists

# 4) Precisa atualizar modo/TLS/PSK?
- name: Precisa atualizar modo/TLS/PSK?
  ansible.builtin.set_fact:
    zbx_needs_update: >-
      {{
        (zbx_proxy_id | length > 0) and (
          (zbx_proxy_exists and (
            (zbx_mode_cur | int)     != (zabbix_proxy_mode | int) or
            (zbx_tls_conn_cur | int) != (zabbix_proxy_tls_connect | int) or
            (zbx_tls_acc_cur  | int) != (zabbix_proxy_tls_accept  | int) or
            (
              (zabbix_proxy_tls_connect | int) == 1 and
              (zabbix_proxy_psk_identity | default('')) | string != (zbx_tls_id_cur | string)
            )
          )) or (not zbx_proxy_exists)
        )
      }}

# 5) Atualizar (modo/TLS) e, se aplicável, PSK/identity
- name: API | proxy.update (modo/TLS/PSK)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "proxy.update"
      params: >-
        {{
          {
            "proxyid": zbx_proxy_id,
            "operating_mode": (zabbix_proxy_mode | int),
            "tls_connect": (zabbix_proxy_tls_connect | int),
            "tls_accept":  (zabbix_proxy_tls_accept  | int)
          }
          |
          combine(
            (
              zabbix_register_proxy_psk_to_server | default(true) | bool and
              (zabbix_proxy_tls_connect | int) == 1 and
              (zabbix_proxy_psk_identity | default('')) | length > 0 and
              (zbx_proxy_psk_value | default('')) | length > 0
            )
            | ternary(
                {"tls_psk_identity": zabbix_proxy_psk_identity, "tls_psk": zbx_proxy_psk_value},
                {}
            )
          )
        }}
      id: 3
    follow_redirects: all
    validate_certs: "{{ zabbix_validate_certs | default(false) }}"
  when: zbx_needs_update | bool
  register: zbx_proxy_update
  failed_when: zbx_proxy_update.json.error is defined
  delegate_to: localhost
  run_once: true

# 6) Mensagem final
- name: Final | Resultado
  ansible.builtin.debug:
    msg: >-
      Proxy '{{ zabbix_proxy_hostname }}' {{
        (not zbx_proxy_exists) | ternary('criado',
        (zbx_needs_update | ternary('atualizado','verificado')))
      }} via API. TLS={{ (zabbix_proxy_tls_connect | int) == 1 | ternary('PSK','Nenhum/Outro') }}.
