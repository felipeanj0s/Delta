# roles/zabbix_server_register_agent/tasks/main.yml
---
# 0) Ler PSK local e validar
- name: Registro do Agente | Ler a PSK do arquivo
  ansible.builtin.slurp:
    src: "{{ zabbix_agent_psk_file }}"
  register: agent_psk_file_content

- name: Registro do Agente | Definir fato com o valor da PSK
  ansible.builtin.set_fact:
    agent_psk_key: "{{ (agent_psk_file_content.content | b64decode) | trim }}"

- name: Sanity | Validar PSK (64 hex)
  ansible.builtin.assert:
    that:
      - agent_psk_key is match('^[0-9a-fA-F]{64}$')
    fail_msg: "PSK do agente inválida. Esperado 64 hex em {{ zabbix_agent_psk_file }}."

# 1) Headers
- name: API | Definir headers padrão com Bearer token
  ansible.builtin.set_fact:
    zbx_headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
  no_log: true

# 2) proxy.get (por nome)
- name: API | Obter ID do Proxy que irá monitorar o agente
  ansible.builtin.uri:
    url: "{{ zabbix_server_url }}/api_jsonrpc.php"
    method: POST
    headers: "{{ zbx_headers }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "proxy.get"
      params:
        filter:
          name: ["{{ zabbix_proxy_hostname }}"]
      id: 1
  delegate_to: localhost
  run_once: true
  register: proxy_get_response
  failed_when: proxy_get_response.json.error is defined

# 3) hostgroup.get
- name: API | Obter IDs dos Grupos de Hosts
  ansible.builtin.uri:
    url: "{{ zabbix_server_url }}/api_jsonrpc.php"
    method: POST
    headers: "{{ zbx_headers }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "hostgroup.get"
      params:
        filter:
          name: "{{ zabbix_agent_hostgroups }}"
      id: 2
  delegate_to: localhost
  run_once: true
  register: hostgroup_get_response
  failed_when: hostgroup_get_response.json.error is defined

# 4) template.get
- name: API | Obter IDs dos Templates
  ansible.builtin.uri:
    url: "{{ zabbix_server_url }}/api_jsonrpc.php"
    method: POST
    headers: "{{ zbx_headers }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "template.get"
      params:
        filter:
          host: "{{ zabbix_agent_templates }}"
      id: 3
  delegate_to: localhost
  run_once: true
  register: template_get_response
  failed_when: template_get_response.json.error is defined

# 5) host.get
- name: API | Verificar se o Host do Agente já existe
  ansible.builtin.uri:
    url: "{{ zabbix_server_url }}/api_jsonrpc.php"
    method: POST
    headers: "{{ zbx_headers }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.get"
      params:
        output: "extend"
        selectInterfaces: "extend"
        filter:
          host: ["{{ zabbix_agent_hostname }}"]
      id: 4
  delegate_to: localhost
  run_once: true
  register: host_get_response
  failed_when: host_get_response.json.error is defined

# 6) host.create (inclui identity e psk AQUI)
- name: API | Criar o Host do Agente (se não existir)
  ansible.builtin.uri:
    url: "{{ zabbix_server_url }}/api_jsonrpc.php"
    method: POST
    headers: "{{ zbx_headers }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.create"
      params:
        host: "{{ zabbix_agent_hostname }}"
        proxy_hostid: "{{ proxy_get_response.json.result[0].proxyid }}"
        interfaces:
          - type: 1
            main: 1
            useip: 1
            ip: "{{ zabbix_agent_source_ip }}"
            dns: ""
            port: "10050"
        groups: "{{ hostgroup_get_response.json.result
                    | map(attribute='groupid')
                    | map('community.general.dict_kv', 'groupid')
                    | list }}"
        templates: "{{ template_get_response.json.result
                      | map(attribute='templateid')
                      | map('community.general.dict_kv', 'templateid')
                      | list }}"
        # PSK/Identity apenas no create
        tls_connect: 1
        tls_accept: 1
        tls_psk_identity: "{{ zabbix_agent_psk_identity }}"
        tls_psk: "{{ agent_psk_key }}"
      id: 5
  delegate_to: localhost
  run_once: true
  when: (host_get_response.json.result | default([])) | length == 0
  register: host_create_response
  failed_when: host_create_response.json.error is defined

# 7) host.update (NÃO enviar identity/psk)
- name: API | Atualizar o Host do Agente (se já existir)
  ansible.builtin.uri:
    url: "{{ zabbix_server_url }}/api_jsonrpc.php"
    method: POST
    headers: "{{ zbx_headers }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.update"
      params:
        hostid: "{{ host_get_response.json.result[0].hostid }}"
        proxy_hostid: "{{ proxy_get_response.json.result[0].proxyid }}"
        groups: "{{ hostgroup_get_response.json.result
                    | map(attribute='groupid')
                    | map('community.general.dict_kv', 'groupid')
                    | list }}"
        templates: "{{ template_get_response.json.result
                      | map(attribute='templateid')
                      | map('community.general.dict_kv', 'templateid')
                      | list }}"
        tls_connect: 1
        tls_accept: 1
      id: 6
  delegate_to: localhost
  run_once: true
  when: (host_get_response.json.result | default([])) | length > 0
  register: host_update_response
  failed_when: host_update_response.json.error is defined
